name: Publish to npm

on:
  push:
    tags:
      - 'v*.*.*'  # All semantic version tags (stable and pre-release)

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Upgrade npm for Trusted Publishing
        run: npm install -g npm@latest

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint
        run: yarn lint:check

      - name: Build
        run: yarn build

      - name: Determine npm dist-tag
        id: dist_tag
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version_tag=$TAG" >> $GITHUB_OUTPUT

          # Check if this is a pre-release version (contains hyphen)
          if [[ $TAG == *"-"* ]]; then
            # Extract pre-release identifier (alpha, beta, rc, test, next)
            if [[ $TAG == *"-alpha."* ]]; then
              echo "tag=alpha" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            elif [[ $TAG == *"-beta."* ]]; then
              echo "tag=beta" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            elif [[ $TAG == *"-rc."* ]]; then
              echo "tag=rc" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            elif [[ $TAG == *"-test."* ]]; then
              echo "tag=test" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            elif [[ $TAG == *"-next."* ]]; then
              echo "tag=next" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              # Unknown pre-release format, use 'prerelease' tag
              echo "tag=prerelease" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            fi
          else
            # Stable release, use 'latest' tag
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm with Trusted Publishing
        run: npm publish --access public --tag ${{ steps.dist_tag.outputs.tag }}

      - name: Summary
        run: |
          echo "### 📦 Published to npm" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.dist_tag.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dist-tag:** \`${{ steps.dist_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release:** ${{ steps.dist_tag.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.dist_tag.outputs.tag }}" == "latest" ]]; then
            echo "✅ Install with: \`npm install @adaptiveworx/iac-components\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Install with: \`npm install @adaptiveworx/iac-components@${{ steps.dist_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          fi
